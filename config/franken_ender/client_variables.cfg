# Configure mainsail client variables as per instructions in mainsail.cfg.

[gcode_macro _CLIENT_VARIABLE]
variable_use_custom_pos   : True  ; use custom park coordinates for x,y [True/False]
variable_custom_park_x    : 228   ; custom x position; value must be within your defined min and max of X
variable_custom_park_y    : 202   ; custom y position; value must be within your defined min and max of Y
# Initialize park z-height from Klipper's config for z-axis max instead - see below.
variable_custom_park_dz   : None  ; custom dz value; the value in mm to lift the nozzle when move to park position
variable_retract          : 1.0   ; the value to retract while PAUSE
variable_cancel_retract   : 5.0   ; the value to retract while CANCEL_PRINT
variable_speed_retract    : 5.0  ; retract speed in mm/s
variable_unretract        : 1.0   ; the value to unretract while RESUME
variable_speed_unretract  : 5.0  ; unretract speed in mm/s
# Initialize hop and move speeds from Klipper's 'velocity' configs instead - see below.
variable_speed_hop        : None  ; z move speed in mm/s
variable_speed_move       : None  ; move speed in mm/s
variable_park_at_cancel   : True  ; allow to move the toolhead to park while execute CANCEL_PRINT [True/False]
#variable_park_at_cancel_x : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
#variable_park_at_cancel_y : None  ; different park position during CANCEL_PRINT [None/Position as Float]; park_at_cancel must be True
## !!! Caution [firmware_retraction] must be defined in the printer.cfg if you set use_fw_retract: True !!!
#variable_use_fw_retract   : False ; use fw_retraction instead of the manual version [True/False]
variable_idle_timeout     : 600    ; time in sec until idle_timeout kicks in. Value 0 means that no value will be set or restored
#variable_runout_sensor    : ""    ; If a sensor is defined, it will be used to cancel the execution of RESUME in case no filament is detected.
##                                   Specify the config name of the runout sensor e.g "filament_switch_sensor runout". Hint use the same as in your printer.cfg
## !!! Custom macros, please use with care and review the section of the corresponding macro.
## These macros are for simple operations like setting a status LED. Please make sure your macro does not interfere with the basic macro functions.
## Only  single line commands are supported, please create a macro if you need more than one command.
#variable_user_pause_macro : ""    ; Everything inside the "" will be executed after the klipper base pause (PAUSE_BASE) function
#variable_user_resume_macro: ""    ; Everything inside the "" will be executed before the klipper base resume (RESUME_BASE) function
#variable_user_cancel_macro: ""    ; Everything inside the "" will be executed before the klipper base cancel (CANCEL_PRINT_BASE) function

# My user-defined variables
variable_ready_x         : 2      ; x position when ready to print
variable_ready_y         : 10     ; y position when ready to print
variable_ready_z         : 10     ; z position when ready to print
variable_wait_z_min_pos  : None   ; minimum z position when 'waiting' (pausing, parking, cleaning, etc.)
gcode:

  # Initialize variables from Klipper's confgile file instead of hard coding them in definitions above
  {action_respond_info("Initializing client variables...")}
  {% set velocity = printer.configfile.settings.pause_resume.recover_velocity %}
  {% set sp_hop = printer.configfile.settings.printer.max_z_velocity|default(velocity) * 60 %}
  {% set sp_move = printer.configfile.settings.printer.max_velocity|default(velocity) * 60 %}
  {% set park_dz = printer['gcode_macro _HOMING_CONFIG'].start_zhop|default(10) %} ; One z-hop
  {% set wait_z_min_pos = printer.toolhead.axis_maximum.z - 2 * park_dz %} ; Two z-hops below the maximum

  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=speed_hop VALUE={sp_hop}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=speed_move VALUE={sp_move}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=custom_park_dz VALUE={park_dz}
  SET_GCODE_VARIABLE MACRO=_CLIENT_VARIABLE VARIABLE=wait_z_min_pos VALUE={wait_z_min_pos}

  SET_IDLE_TIMEOUT TIMEOUT={idle_timeout}

[delayed_gcode _INIT_CLIENT_VARIABLES]
# Initialize client variables when the printer boots up.
initial_duration: 1.0
gcode:
  _CLIENT_VARIABLE
